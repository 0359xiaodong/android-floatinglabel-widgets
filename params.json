{"name":"Android-floatinglabel-widgets","tagline":"Floating label input widgets","body":"Android Floating Label Widgets\r\n==============================\r\n\r\nA set of input widgets with a hint label that floats when input is not empty.\r\n\r\n## Demo\r\n\r\nA demo of the widget is worth a thousand words. You can download it for free on Google Play.\r\n\r\n  [![Demo on Google Play](http://developer.android.com/images/brand/en_generic_rgb_wo_60.png)](https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo)\r\n\r\nWe also have a small video showing it\r\n\r\n[![demo video](http://img.youtube.com/vi/hpZD9gJcRg0/0.jpg)](http://youtu.be/hpZD9gJcRg0)\r\n\r\n## Usage\r\n\r\n### Including the library\r\n\r\nThe easiest way to get the library included in your project is by using Gradle. Simply add the \r\nfollowing line to your dependencies block:\r\n\r\n```groovy\r\ndependencies {\r\n    compile 'com.marvinlabs:android-floatinglabel-widgets:1.0.+@aar'\r\n}\r\n```\r\n    \r\nOf course, you can replace the version number by whichever version you need (you can have a look at \r\nthis repository's tags to know which is the latest).\r\n\r\n### Getting a floating label widget in your fragment/activity\r\n\r\n#### EditText\r\n\r\nTo include a floating label EditText in your layout, simply use the following XML code snippet:\r\n\r\n```xml\r\n<!-- An edit text -->\r\n<com.marvinlabs.widget.floatinglabel.edittext.FloatingLabelEditText\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:layout_marginBottom=\"15dp\"\r\n    app:flw_labelText=\"Simple text input\" />\r\n\r\n<!-- An edit text with a custom input type and an icon on the left -->\r\n<com.marvinlabs.widget.floatinglabel.edittext.FloatingLabelEditText\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:drawableLeft=\"@drawable/ic_lock\"\r\n    android:drawablePadding=\"10dp\"\r\n    android:inputType=\"textPassword\"\r\n    app:flw_labelText=\"Password input\" />\r\n```\r\n\r\n#### ItemPicker\r\n\r\nTo include a floating label ItemPicker in your layout, simply use the following XML code snippet:\r\n\r\n```xml\r\n<!-- A widget that shows the result of item selection -->\r\n<com.marvinlabs.widget.floatinglabel.picker.FloatingLabelItemPicker\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    app:flw_labelText=\"Item picker\" />\r\n```\r\n\r\nWe then need some code to bring up the item picker. The library ships with simple DialogFragment\r\npicker implementations. Of course, you are free to roll your own pickers. Here is how we setup the\r\nwidget in the demo activity:\r\n\r\n```java\r\npublic class MainWidgetsActivity extends FragmentActivity implements ItemPickerListener<String> {\r\n    FloatingLabelItemPicker<String> picker;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        // Activity layout\r\n        setContentView(R.layout.activity_main_widgets);\r\n\r\n        // Spinners\r\n        picker = (FloatingLabelItemPicker<String>) findViewById(R.id.picker1);\r\n\r\n        // These are the items we want to be able to pick\r\n        picker.setAvailableItems(new ArrayList<String>(Arrays.asList(\"Item 1.1\", \"Item 1.2\", \"Item 1.3\")));\r\n\r\n        // We listen to our pickerWidget events to show the dialog\r\n        picker.setWidgetListener(new FloatingLabelItemPicker.OnItemPickerWidgetEventListener<String>() {\r\n            @Override\r\n            public void onShowItemPickerDialog(FloatingLabelItemPicker<String> source) {\r\n                // We use fragments because we'll be safe in edge cases like screen orientation\r\n                // change. You could use a simple AlertDialog but really, no, you don't want to.\r\n                StringPickerDialogFragment itemPicker = StringPickerDialogFragment.newInstance(\r\n                        source.getId(),\r\n                        \"My dialog title\",\r\n                        \"OK\", \"Cancel\",\r\n                        true,\r\n                        source.getSelectedIndices(),\r\n                        new ArrayList<String>((Collection<String>) source.getAvailableItems()));\r\n                itemPicker.show(getSupportFragmentManager(), \"ItemPicker\");\r\n            }\r\n        });\r\n    }\r\n\r\n    // Implementation of the ItemPickerListener interface: those two methods get called by the\r\n    // ItemPicker automatically when something happens\r\n\r\n    @Override\r\n    public void onCancelled(int pickerId) {\r\n    }\r\n\r\n    @Override\r\n    public void onItemsSelected(int pickerId, int[] selectedIndices) {\r\n        picker.setSelectedIndices(selectedIndices);\r\n    }\r\n}\r\n```\r\n\r\n## Customisable components\r\n\r\nThis library has lots of interfaces and helper classes to help you either extend it and/or change\r\nthe existing behaviour.\r\n\r\n### LabelAnimator\r\n\r\nThis handles the way labels get animated when transitioning from anchored to the input widget to\r\nfloating above it.\r\n\r\n### ItemPrinter\r\n\r\nThis is used by the item picker widgets and dialogs to simply convert an object to a String\r\nrepresentation. This is in case you would not want to use the toString method to display your\r\nobjects.\r\n\r\n### ItemPicker\r\n\r\nThis defines what an item picker should be able to do. We have provided an implementation in the\r\nform of a DialogFragment. You could however roll your own implementation for instance to use\r\na custom dialog, a date/time picker, etc.\r\n\r\n## About Vincent & MarvinLabs\r\n\r\nI am a freelance developer located in Biarritz, France. You can \r\n[have a look at my website](http://vincentprat.info) to get to know me a little better. If you want \r\nto follow me, here are some links:\r\n\r\n* [Follow me on Twitter](http://twitter.com/vpratfr)\r\n* [Follow me on Google+](https://plus.google.com/+VincentPrat)\r\n* [Follow me on Facebook](http://www.facebook.com/vpratfr)\r\n\r\nMarvinLabs is my digital studio specialised in native mobile applications and web sites. You can \r\n[browse our website](http://www.marvinlabs.com) to get to know us a little better. If you want to \r\nget updates about our work, you can also:\r\n\r\n* [Follow us on Twitter](http://twitter.com/marvinlabs)\r\n* [Follow us on Google+](https://plus.google.com/+Marvinlabs)\r\n* [Follow us on Facebook](http://www.facebook.com/studio.marvinlabs)\r\n\r\n## Change log\r\n\r\n### 1.0.0 (2014-08-29)\r\n\r\n  - First release (beta)\r\n  - Two floating label widgets for a start (EditText and ItemPicker)\r\n  - Demo application","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}